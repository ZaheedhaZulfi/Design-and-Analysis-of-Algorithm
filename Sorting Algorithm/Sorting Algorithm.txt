1.
%selection sort

arr = [64, 25, 12, 22, 11]; % Example array
n = length(arr);

for i = 1:n-1
    minIndex = i;
    for j = i+1:n
        if arr(j) < arr(minIndex)
            minIndex = j;
        end
    end
    % Swap elements
    if minIndex ~= i
        temp = arr(i);
        arr(i) = arr(minIndex);
        arr(minIndex) = temp;
    end
end

disp('Sorted array:');
disp(arr);

output:
Sorted array:
    11    12    22    25    64

2.
%Bubble sort
arr = [64, 34, 25, 12, 22, 11,90]; 

n=length(arr);
disp(arr);

for  i=1:n-1
    for j=1:n-i
        if arr(j) >arr(j+1)
            %swap element
               temp=arr(j);
               arr(j)=arr(j+1);
               arr(j+1)=temp;
       end 
   end
end
%display array state at each step
     fprintf("Sorted array\n");
     
     disp(arr);

3.
%insertion sort

arr = [9, 5, 3, 8, 2, 6, 1, 7, 4];

% Get the length of the array
n = length(arr);

% Insertion Sort algorithm
for i = 2:n
    key = arr(i);
    j = i - 1;
    
    % Move elements of arr[0..i-1], that are greater than key,
    % to one position ahead of their current position
    while j > 0 && arr(j) > key
        arr(j + 1) = arr(j);
        j = j - 1;
    end
    
    arr(j + 1) = key;
end

% Display sorted array
disp('Sorted array:');
disp(arr);

% 3.merge sort
% Define the array to sort
array = [8, 4, 5, 3, 2, 9, 1];

% Call the merge sort function
sortedArray = mergeSort(array);

% Display the sorted array
disp('Sorted Array:');
disp(sortedArray);


% --- Merge Sort Function ---
function sortedArray = mergeSort(array)
% mergeSort - Sorts an array using the Merge Sort algorithm

    if length(array) <= 1
        % Base case: if array has 0 or 1 element, it is already sorted
        sortedArray = array;
        return;
    end

    % Find the midpoint of the array
    mid = floor(length(array) / 2);

    % Recursively sort the left half
    left = mergeSort(array(1:mid));

    % Recursively sort the right half
    right = mergeSort(array(mid+1:end));

    % Merge the two sorted halves
    sortedArray = merge(left, right);
end

% --- Merge Function ---
function result = merge(left, right)
% merge - Merges two sorted arrays into one sorted array

    result = []; % Empty array to store the merged result
    i = 1; j = 1;

    % Merge elements from left and right in sorted order
    while i <= length(left) && j <= length(right)
        if left(i) <= right(j)
            result(end + 1) = left(i);
            i = i + 1;
        else
            result(end + 1) = right(j);
            j = j + 1;
        end
    end

    % Add remaining elements from left
    while i <= length(left)
        result(end + 1) = left(i);
        i = i + 1;
    end

    % Add remaining elements from right
    while j <= length(right)
        result(end + 1) = right(j);
        j = j + 1;
    end
end

>> mergeSort
Sorted Array:
     3     9    10    27    38    43    82
